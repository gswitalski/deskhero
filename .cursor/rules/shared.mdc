---
description: 
globs: 
alwaysApply: true
---
# AI Rules for DeskHero

DeskHero is a web-based desk booking system that rescues office warriors from the dreaded “Oops, someone’s in my spot” drama. It supports up to 200 users and 50 desks, letting employees snag full-day spots, cancel on the fly, and review their reservation history, while admins wield a power panel to manage desks and user accounts. Built solo (with an AI sidekick) in just two weeks, it’s the lean MVP every modern workplace needs for conflict-free seating.

## Tech Stack

Frotend:
- Angular
- TypeScript
- Sass
- Angular Material
Backend:
- Java
- Spring Boot
- Spring Data
- Spring Sequrity
- Lombok
- PostgreSQL

## Project Structure

When introducing changes to the project, always follow the directory structure below:

### Frontend:
- `./frontend/src` - frontend source code
- `./frontend/src/app/layouts` - Angular layouts components
- `./frontend/src/app/pages` - Angular pages components
- `./frontend/src/app/core` - Angular core components and services
- `./frontend/src/app/shared` - Angular shared components, models and services
- `./frontend/src/assets` - Angular static internal assets

### Backend
- `./backend/src/main/java/pl/grsw/deskhero` - backend source code
- `./backend/src/test/java/pl/grsw/deskhero` - backend unit tests
- `./backend/src/test/java/pl/grsw/deskhero/conroller` - Spring MVC conrollers
- `./backend/src/test/java/pl/grsw/deskhero/dto` - dto classes
- `./backend/src/test/java/pl/grsw/deskhero/model` - Spring Data models
- `./backend/src/test/java/pl/grsw/deskhero/repository` - Spring Data repositories
- `./backend/src/test/java/pl/grsw/deskhero/service` - Spring Data services

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
